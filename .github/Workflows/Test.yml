name: VFIDE Complete Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  compile-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev hardhat @nomiclabs/hardhat-ethers @nomiclabs/hardhat-waffle ethereum-waffle chai ethers
          npm install --save-dev solidity-coverage hardhat-gas-reporter hardhat-contract-sizer
          npm install --save-dev @openzeppelin/contracts @openzeppelin/test-helpers
          npm install --save-dev prettier prettier-plugin-solidity solhint
      
      - name: Compile contracts
        run: npx hardhat compile
      
      - name: Check contract sizes
        run: npx hardhat size-contracts
        
      - name: Run unit tests
        run: npx hardhat test
        env:
          REPORT_GAS: true
      
      - name: Generate coverage report
        run: npx hardhat coverage
      
      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
      
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comment = `## ✅ Test Results
            - Compilation: ✅ Passed
            - Unit Tests: ✅ Passed
            - Coverage: Check artifacts
            
            Gas report and coverage available in artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-analysis:
    runs-on: ubuntu-latest
    needs: compile-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Slither security analysis
        uses: crytic/slither-action@v0.3.0
        with:
          target: 'contracts/'
          slither-args: '--print human-summary'
      
      - name: Run Mythril analysis
        uses: ConsenSys/mythril-action@v1
        with:
          args: 'contracts/VFIDEToken.sol'
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            slither-report.json
            mythril-report.json

  critical-checks:
    runs-on: ubuntu-latest
    needs: compile-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check MAX_SUPPLY immutability
        run: |
          if grep -r "function mint\|function _mint\|function adminMint" contracts/; then
            echo "❌ CRITICAL: Found mint function!"
            exit 1
          else
            echo "✅ No mint functions found"
          fi
      
      - name: Check for owner backdoors
        run: |
          if grep -r "selfdestruct\|delegatecall\|.call(" contracts/ | grep -v "// SAFE:"; then
            echo "⚠️ WARNING: Found potentially dangerous functions"
          fi
      
      - name: Verify critical constants
        run: |
          grep "MAX_SUPPLY = 200_000_000" contracts/VFIDEToken.sol || exit 1
          grep "TIER_1_PRICE = 3" contracts/VFIDEPresale.sol || exit 1
          echo "✅ Critical constants verified"
